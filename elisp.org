#+TITLE: Road to Elisp
#+AUTHOR: Gautam Sharma

* Escence of elisp

- Can be considered as a REPL and at boot time, the config file gets loaded onto the REPL
- To get execute any elisp code in say any buffer, it needs to be in ~emacs-elisp-mode~. .el files and scratch buffer are by default in ~emacs-elisp-mode~
- Any evaluation of elisp expression done manually goes to the same REPL.
- Using the word symbols instead of variable makes more sense in elisp.

* Note
+ Syntax - Calling a function : (func arg1 arg2 arg3)
+ A variable name could have ~-~
+ Boolean values
  - True is conventionally represented by ~t~. Any value other than ~nil~ represents true in elisp
  - False is conventionally represented by ~nil~. ~()~ and ~'()~ also represent nil

* Functions

** Calculations
Calling function ~+~ with args 1, 2 and 3

#+BEGIN_SRC elisp
(+ 1 2 3)
#+END_SRC

#+RESULTS:
: 6

** ~message~
Prints message in mini-buffer

#+BEGIN_SRC elisp
(message "hello, world!")
#+END_SRC

#+RESULTS:
: hello, world!

** ~insert~
Insert text at point (point means cursor)

#+BEGIN_SRC elisp
(insert " : inserted text!")
#+END_SRC

#+RESULTS:

** Lists
*** Creation
- ~quote~ means return list (1 2 3)

#+BEGIN_SRC elisp
(quote (1 2 3))
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |

- ~quote~ can be written as ~'~

#+BEGIN_SRC elisp
'(1 2 3)
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |

- Nested lists

#+BEGIN_SRC elisp
'(1 2 (3 4 5) (6 (7)))
#+END_SRC

#+RESULTS:
| 1 | 2 | (3 4 5) | (6 (7)) |

*** Manipulation functions
**** ~car~
Takes 1st element of list

#+BEGIN_SRC elisp
(car '(1 2 3))
#+END_SRC

#+RESULTS:
: 1

**** ~cdr~
Takes rest of elements (other than 1st) of list

#+BEGIN_SRC elisp
(cdr '(1 2 3))
#+END_SRC

#+RESULTS:
| 2 | 3 |

**** ~cons~
Joins an element (element could be anything. even a list) to a lists

  + Simple call

    - ~cons~ treats first arg of list as an element and second as a list

    #+BEGIN_SRC elisp
    (cons 1 '(2 3))
    #+END_SRC

    #+RESULTS:
    | 1 | 2 | 3 |

    - But first arg i.e an element could also be a list

    #+BEGIN_SRC elisp
    (cons '(1 2) '(3 4))
    #+END_SRC

    #+RESULTS:
    | (1 2) | 3 | 4 |

  + Recursive call

    #+BEGIN_SRC elisp
    (cons 1 (cons 2 (cons 3 '())))
    #+END_SRC

    #+RESULTS:
    | 1 | 2 | 3 |

**** ~append~
Joins two lists. it treats both args as list

#+BEGIN_SRC elisp
(append '(1 2) '(3 4))
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 |

** ~nil~
3 lines in snippet mean the same thing i.e ~nil~

#+BEGIN_SRC elisp
'()
()
nil
#+END_SRC

** ~null~
Function to check if something is ~Nil~. Here, nil is obviously equal to nil

#+BEGIN_SRC elisp
(null nil)
#+END_SRC

#+RESULTS:
: t

* Variables (Symbols)

** ~set~ and ~setq~ - Create global variables
*** ~set~
- Function that takes 1st arg as a quoted symbol and 2nd arg as a value and makes that quoted symbol point to that value

#+BEGIN_SRC elisp
(set 'some-list '(1 2 3))
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |

- Now ~some-list~ points to ~(1 2 3)~

#+BEGIN_SRC elisp
some-list
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |

*** ~setq~
- It is same as ~set~ except the fact that it quotes first argument by default

#+BEGIN_SRC elisp
(setq my-list '(foo bar baz))
#+END_SRC

#+RESULTS:
| foo | bar | baz |

#+BEGIN_SRC elisp
my-list
#+END_SRC

#+RESULTS:
| foo | bar | baz |

** ~let~ - Create local variables
- ~let~ creates a scope within which we can define and use variables
- Variables declared within ~let~ should not be dependent on any other variable
- This indicates that scope of variables declared in ~let~ starts outside of declaration block. Here declaration block refers to parenthesis inside which ~a~ and ~b~ are declared
- Here ~format~ function displays formatted string in mini-buffer

#+BEGIN_SRC elisp
(let ((a 1)
      (b 5))
      (format "a is %d and b is %d" a b))
#+END_SRC

#+RESULTS:
: a is 1 and b is 5

** ~let*~ - Create local variables
- ~let*~ is same as ~let~ except the fact that variables declared within ~let*~ can be dependent on other variables
- This indicates that scope of variables declared in ~let*~ starts from the point where they are declared

#+BEGIN_SRC elisp
(let* ((a 1)
       (b (+ a 5)))
       (format "a is %d and b is %d" a b))
#+END_SRC

#+RESULTS:
: a is 1 and b is 6

* Defining Functions

- Without Args

#+BEGIN_SRC elisp
(defun say-hello ()
  (message "hello!"))

(say-hello)
#+END_SRC

#+RESULTS:
: hello!

- With Args

#+BEGIN_SRC elisp
  (defun square (x)
    (* x x))

  (defun distance (x1 x2 y1 y2)
    (sqrt (+ (square (- x2 x1))
             (square (- y2 y1)))))

  (distance 3 0 0 4)
#+END_SRC

#+RESULTS:
: 5.0

* Conditionals

** ~when~
- It mimics what we know as an if statement in other languages

#+BEGIN_SRC elisp
  (when (= (+ 2 2) 4)
    (message "passed sanity check!"))
#+END_SRC

#+RESULTS:
: passed sanity check!

** ~if~
- It mimics what we know as an if-else statement in other languages

  #+BEGIN_SRC elisp
    (defun even-or-odd (n)
      (if (= (% n 2) 0)
          "even"
        "odd"))

    (even-or-odd 4)
    (even-or-odd 3)
  #+END_SRC

  #+RESULTS:
  : odd

** ~cond~
- It mimics if-else ladder in other languages
- Any value other than ~nil~ represents true in elisp but we use ~t~ as a convention

#+BEGIN_SRC elisp
    (defun pick-a-word (n)
      (cond
       ((= n 1) "one")         ;;; if
       ((= n 2) "two")         ;;; else if
       ((= n 3) "three")       ;;; else if
       (t "something else")))  ;;; else

  ;; (pick-a-word 2)
  (pick-a-word -72)
#+END_SRC

#+RESULTS:
: something else

* Recursion

#+BEGIN_SRC elisp
  (defun factorial (n)
    (if (< n 1)
        1
      (* n (factorial (- n 1)))))

  (factorial 5)
#+END_SRC

#+RESULTS:
: 120

* Anonymous functions
- What is lambda?
  + For instance, you can have a variable say ~foo~ and make it point to number ~3~. Eg ~(setq foo 3)~
  + Here, ~3~ is a number literal i.e value of number
  + Similarly, in ~(fset 'cube (lambda (x) (* x x x)))~, we have a variable ~cube~ pointing to a lambda
  + Hence, lambda is a function literal i.e value of function

** ~lambda~

#+BEGIN_SRC elisp
(lambda (x) (* x x x))
#+END_SRC

** Creating and calling ~lambda~

#+BEGIN_SRC elisp
((lambda (x) (* x x x)) 5)
#+END_SRC

#+RESULTS:
: 125

** Pointing a variable to ~lambda~ (binding function literal to a variable)

#+BEGIN_SRC elisp
(fset 'cube (lambda (x) (* x x x)))

(cube 5)
#+END_SRC

#+RESULTS:
: 125

* Higher order funciton
** ~mapcr~
- Mapping functions to a list i.e applying a function n times to n different variables
- Here, ~upcase~ is an elisp function

#+BEGIN_SRC elisp
(mapcar 'upcase '("foo" "bar" "baz"))
#+END_SRC

#+RESULTS:
| FOO | BAR | BAZ |

** ~remove-if-not~
- ~remove-if-not~ is similar to ~mapcr~ except that it filters out nil values

#+BEGIN_SRC elisp
  (remove-if-not 'oddp '(1 2 4 5 7))
#+END_SRC

#+RESULTS:
| 1 | 5 | 7 |

* Example code: Quicksort

#+BEGIN_SRC elisp
  (defun qs (items)
    (if (null items)
        '()
      (let* ((pivot (car items))
             (rest (cdr items))
             (lesser (remove-if-not
                      (lambda (x) (<= x pivot)) rest))
             (greater (remove-if-not
                       (lambda (x) (> x pivot)) rest)))
        (append (qs lesser) (list pivot) (qs greater)))))

  (qs '(3 5 7 8 4 2 5 7 0 8 4 6))
#+END_SRC

#+RESULTS:
| 0 | 2 | 3 | 4 | 4 | 5 | 5 | 6 | 7 | 7 | 8 | 8 |

* Keybindings

** Set global key binding

#+BEGIN_SRC elisp
  (global-set-key (kbd "M-#") 'sort-lines)
#+END_SRC

#+RESULTS:
: sort-lines

** Major mode in which is currently active

#+BEGIN_SRC elisp
  major-mode
#+END_SRC

#+RESULTS:
: org-mode

** Hooks
When a hook is added to that mode, the code withing the hook is executed when the corresponding major mode becomes active

#+BEGIN_SRC elisp
  (add-hook 'c-mode-common-hook
            (lambda ()
              (local-key-set (kbd "<f5>") 'recompile)))
#+END_SRC

* Built-in documentation

** Describe key

#+BEGIN_SRC elisp
  ;; C-h k
  (describe-key (kbd "C-h k"))
#+END_SRC

#+RESULTS:
: C-h k is undefined

** Apropros command
Search for commands that match some string.

#+BEGIN_SRC elisp
  ;; C-h a
  (apropos-command "region")
#+END_SRC

#+RESULTS:
: Type C-w C-o to remove help window.

**

#+BEGIN_SRC elisp
  ;; C-h f
  (describe-function 'qs)
#+END_SRC

#+RESULTS:
: qs is a Lisp function.
:
: (qs ITEMS)
:
: Not documented.
